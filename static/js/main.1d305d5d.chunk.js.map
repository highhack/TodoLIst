{"version":3,"sources":["serviceWorker.ts","api/todolists-api.ts","utils/error-utils.ts","features/Login/auth-reducer.ts","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","app/App.tsx","app/store.ts","index.tsx","styles/todolistBackground.jpg","styles/sky.jpg"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","taskTitile","model","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","error","setAppStatusAC","status","handleServerNetworkError","message","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedInAC","state","action","payload","value","authReducer","reducer","actions","isInitialized","setAppInitializedAC","appReducer","removeTodolistAC","index","findIndex","tl","splice","addTodolistAC","unshift","todolist","filter","entityStatus","changeTodolistTitleAC","changeTodolistFilterAC","changeTodolistEntityStatusAC","setTodolistsAC","todolists","map","todolistsReducer","fetchTasksTC","createAsyncThunk","thunkAPI","then","res","tasks","items","removeTaskTC","param","removeTaskAC","t","addTaskAC","todoListId","updateTaskAC","extraReducers","builder","addCase","forEach","fulfilled","tasksReducer","updateTaskTC","getState","task","find","apiModel","deadline","description","priority","startDate","resultCode","catch","console","warn","AddItemForm","React","memo","addItem","disabled","log","useState","setTitle","setError","addItemHandler","trim","TextField","variant","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","key","className","style","display","alignItems","Delete","Checkbox","Todolist","demo","useDispatch","useEffect","thunk","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","removeTodolist","paddingTop","Button","TodolistsList","useSelector","auth","item","addTaskTC","changeStatus","newTitle","changeTodolistTitleTC","addTodolist","addTodolistTC","Grid","container","padding","spacing","allTodolistTasks","Paper","border","backgroundImage","backImageForTodolist","opacity","to","Alert","elevation","ErrorSnackbar","app","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","validate","values","email","password","initialValues","rememberMe","onSubmit","justify","xs","margin","handleSubmit","FormControl","FormLabel","href","rel","target","FormGroup","getFieldProps","errors","type","FormControlLabel","control","App","logoutHandler","backImage","height","minHeight","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","exact","path","render","top","textAlign","width","CircularProgress","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.1d305d5d.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from 'axios'\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '054e5331-25ee-4674-ab0e-4d15fe1c9edd'\r\n    }\r\n}\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    ...settings\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        const promise = instance.get<TodolistType[]>('todo-lists');\r\n        return promise;\r\n    },\r\n    createTodolist(title: string) {\r\n        const promise = instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title});\r\n        return promise;\r\n    },\r\n    deleteTodolist(id: string) {\r\n        const promise = instance.delete<ResponseType>(`todo-lists/${id}`);\r\n        return promise;\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        const promise = instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\r\n        return promise;\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitile: string) {\r\n        return instance.post<ResponseType<{ item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title: taskTitile});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        const promise = instance.post<ResponseType<{userId?: number}>>('auth/login', data);\r\n        return promise;\r\n    },\r\n    logout() {\r\n        const promise = instance.delete<ResponseType<{userId?: number}>>('auth/login');\r\n        return promise;\r\n    },\r\n    me() {\r\n       const promise =  instance.get<ResponseType<{id: number; email: string; login: string}>>('auth/me');\r\n       return promise\r\n    }\r\n}\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../app/app-reducer'\r\nimport {ResponseType} from '../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC({error: data.messages[0]}))\r\n    } else {\r\n        dispatch(setAppErrorAC({error: 'Some error occurred'}))\r\n    }\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppErrorAC({error: error.message ? error.message: 'Some error occurred'}))\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n","import {Dispatch} from 'redux'\r\nimport {SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\nimport {authAPI, LoginParamsType} from '../../api/todolists-api'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\nimport {createSlice, PayloadAction} from '@reduxjs/toolkit'\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'auth',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setIsLoggedInAC(state, action: PayloadAction<{value: boolean}>) {\r\n            state.isLoggedIn = action.payload.value\r\n        }\r\n    }\r\n})\r\n\r\nexport const authReducer = slice.reducer\r\nexport const {setIsLoggedInAC} = slice.actions\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    authAPI.login(data)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC({value: true}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\nexport const logoutTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    authAPI.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC({value: false}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n\r\nconst a1 = {\r\n    type: 'SET-IS-LOGIN-IN',\r\n    payload: {\r\n        value: true\r\n    }\r\n}\r\nconst a2 = {\r\n    type: 'SET-blabal',\r\n    payload: {\r\n        user: {name: \"sdsd\"},\r\n        age: 12\r\n    }\r\n}\r\n","import {Dispatch} from 'redux'\r\nimport {authAPI} from '../api/todolists-api'\r\nimport {setIsLoggedInAC} from '../features/Login/auth-reducer'\r\nimport {createSlice, PayloadAction} from '@reduxjs/toolkit'\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'app',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setAppStatusAC: (state, action: PayloadAction<{ status: RequestStatusType }>) => {\r\n            state.status = action.payload.status\r\n        },\r\n        setAppErrorAC: (state, action: PayloadAction<{ error: string | null }>) => {\r\n            state.error = action.payload.error\r\n        },\r\n        setAppInitializedAC: (state, action: PayloadAction<{ isInitialized: boolean }>) => {\r\n            state.isInitialized = action.payload.isInitialized\r\n        }\r\n    }\r\n})\r\n\r\nexport const appReducer = slice.reducer\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    // происходит ли сейчас взаимодействие с сервером\r\n    status: RequestStatusType\r\n    // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\r\n    error: string | null\r\n    // true когда приложение проинициализировалось (проверили юзера, настройки получили и т.д.)\r\n    isInitialized: boolean\r\n}\r\n\r\nexport const {setAppErrorAC, setAppStatusAC, setAppInitializedAC} = slice.actions\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    authAPI.me().then(res => {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC({value: true}))\r\n        } else {\r\n\r\n        }\r\n\r\n        dispatch(setAppInitializedAC({isInitialized: true}))\r\n    })\r\n}\r\n\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\n\r\n","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {RequestStatusType, setAppStatusAC} from '../../app/app-reducer'\r\nimport {handleServerNetworkError} from '../../utils/error-utils'\r\nimport {createSlice, PayloadAction, ThunkDispatch} from '@reduxjs/toolkit'\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nconst slice = createSlice({\r\n    name: 'todolists',\r\n    initialState: initialState,\r\n    reducers: {\r\n        removeTodolistAC(state, action: PayloadAction<{ id: string }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id);\r\n            if (index > -1) {\r\n                state.splice(index, 1);\r\n            }\r\n        },\r\n        addTodolistAC(state, action: PayloadAction<{ todolist: TodolistType }>) {\r\n            state.unshift({...action.payload.todolist, filter: 'all', entityStatus: 'idle'})\r\n        },\r\n        changeTodolistTitleAC(state, action: PayloadAction<{ id: string, title: string }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id);\r\n            state[index].title = action.payload.title;\r\n        },\r\n        changeTodolistFilterAC(state, action: PayloadAction<{ id: string, filter: FilterValuesType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id);\r\n            state[index].filter = action.payload.filter;\r\n        },\r\n        changeTodolistEntityStatusAC(state, action: PayloadAction<{ id: string, status: RequestStatusType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id);\r\n            state[index].entityStatus = action.payload.status;\r\n        },\r\n        setTodolistsAC(state, action: PayloadAction<{ todolists: Array<TodolistType> }>) {\r\n            return action.payload.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        }\r\n    }\r\n})\r\n\r\nexport const todolistsReducer = slice.reducer\r\nexport const {\r\n    removeTodolistAC, addTodolistAC, changeTodolistTitleAC\r\n    , changeTodolistFilterAC, changeTodolistEntityStatusAC, setTodolistsAC\r\n} = slice.actions\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC({todolists: res.data}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n            .catch(error => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        //изменим глобальный статус приложения, чтобы вверху полоса побежала\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\r\n        dispatch(changeTodolistEntityStatusAC({id: todolistId, status: 'loading'}))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                dispatch(removeTodolistAC({id: todolistId}))\r\n                //скажем глобально приложению, что асинхронная операция завершена\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                dispatch(addTodolistAC({todolist: res.data.data.item}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                dispatch(changeTodolistTitleAC({id: id, title}))\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n","import {\r\n    addTodolistAC,\r\n    removeTodolistAC,\r\n    setTodolistsAC\r\n} from './todolists-reducer'\r\nimport {\r\n    TaskPriorities,\r\n    TaskStatuses,\r\n    TaskType,\r\n    todolistsAPI,\r\n    UpdateTaskModelType\r\n} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\nimport {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit'\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const fetchTasksTC = createAsyncThunk('tasks/fetchTasks', (todolistId: string, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    return todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            // thunkAPI.dispatch(setTasksAC({tasks, todolistId}))\r\n            thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            return {tasks, todolistId}\r\n        })\r\n})\r\n\r\nexport const removeTaskTC = createAsyncThunk('tasks/removeTasks', (param: {taskId: string, todolistId: string}, thunkAPI) => {\r\n    todolistsAPI.deleteTask(param.todolistId, param.taskId)\r\n        .then(res => {\r\n            thunkAPI.dispatch((removeTaskAC({taskId: param.taskId, todolistId: param.todolistId})))\r\n        })\r\n})\r\n\r\nconst slice = createSlice({\r\n    name: 'tasks',\r\n    initialState,\r\n    reducers: {\r\n        removeTaskAC(state, action: PayloadAction<{ taskId: string, todolistId: string }>) {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks.splice(index, 1)\r\n            }\r\n        },\r\n        addTaskAC(state, action: PayloadAction<TaskType>) {\r\n            state[action.payload.todoListId].unshift(action.payload)\r\n        },\r\n        updateTaskAC(state, action: PayloadAction<{ taskId: string, model: UpdateDomainTaskModelType, todolistId: string }>) {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks[index] = {...tasks[index], ...action.payload.model}\r\n            }\r\n        },\r\n        // setTasksAC(state, action: PayloadAction<{ tasks: Array<TaskType>, todolistId: string }>) {\r\n        //     state[action.payload.todolistId] = action.payload.tasks\r\n        // }\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(addTodolistAC, (state, action) => {\r\n            state[action.payload.todolist.id] = [];\r\n        });\r\n        builder.addCase(removeTodolistAC, (state, action) => {\r\n            delete state[action.payload.id];\r\n        });\r\n        builder.addCase(setTodolistsAC, (state, action) => {\r\n            action.payload.todolists.forEach((tl: any) => {\r\n                state[tl.id] = []\r\n            })\r\n        });\r\n        builder.addCase(fetchTasksTC.fulfilled, (state, action) => {\r\n            state[action.payload.todolistId] = action.payload.tasks\r\n        });\r\n    }\r\n})\r\n\r\nexport const tasksReducer = slice.reducer\r\n\r\n// actions\r\nexport const {removeTaskAC, addTaskAC, updateTaskAC} = slice.actions\r\n\r\n// thunks\r\n// export const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n//     dispatch(setAppStatusAC({status: 'loading'}))\r\n//     todolistsAPI.getTasks(todolistId)\r\n//         .then((res) => {\r\n//             const tasks = res.data.items\r\n//             dispatch(setTasksAC({tasks, todolistId}))\r\n//             dispatch(setAppStatusAC({status: 'succeeded'}))\r\n//         })\r\n// }\r\n// export const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch) => {\r\n//     todolistsAPI.deleteTask(todolistId, taskId)\r\n//         .then(res => {\r\n//             const action = removeTaskAC({taskId, todolistId})\r\n//             dispatch(action)\r\n//         })\r\n// }\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                const action = addTaskAC(task)\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...model\r\n        }\r\n\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = updateTaskAC({taskId, model, todolistId})\r\n                    dispatch(action)\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport { IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function({addItem, disabled = false}: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== \"\") {\r\n            addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log(\"EditableSpan called\");\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}\r\n                style={{\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                }}>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\r\nimport {useDispatch} from 'react-redux'\r\nimport {fetchTasksTC} from '../tasks-reducer'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        const thunk = fetchTasksTC(props.todolist.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport {Grid, Paper} from '@material-ui/core'\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport {Redirect} from 'react-router-dom'\r\nimport backImageForTodolist from \"../../styles/todolistBackground.jpg\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return;\r\n        }\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [demo,isLoggedIn, dispatch])\r\n\r\n    const removeTask = useCallback(function (taskId: string, todolistId: string) {\r\n        const thunk = removeTaskTC({taskId: taskId, todolistId: todolistId})\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC({id: todolistId, filter: value})\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={\"/login\"}/>\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper\r\n                            style={{\r\n                                padding: '10px',\r\n                                border: 'solid 1px blue',\r\n                                backgroundImage: `url(${backImageForTodolist})`,\r\n                                opacity: '0.8'\r\n                            }}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppErrorAC} from '../../app/app-reducer'\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    //const [open, setOpen] = React.useState(true)\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error);\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC({error: null}));\r\n    }\r\n\r\n\r\n    const isOpen = error !== null;\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\r\nimport {useFormik} from 'formik'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {loginTC} from './auth-reducer'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport { Redirect } from 'react-router-dom'\r\n\r\nexport const Login = () => {\r\n    const dispatch = useDispatch()\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn);\r\n\r\n    const formik = useFormik({\r\n        validate: (values) => {\r\n            if (!values.email) {\r\n                return {\r\n                    email: 'Email is required'\r\n                }\r\n            }\r\n            if (!values.password) {\r\n                return {\r\n                    password: 'Password is required'\r\n                }\r\n            }\r\n\r\n        },\r\n        initialValues: {\r\n            email: 'dailinet10@gmail.com',\r\n            password: 'test',\r\n            rememberMe: false\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values));\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={\"/\"} />\r\n    }\r\n\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4} style={{margin: '10%'}}>\r\n            <form onSubmit={formik.handleSubmit} >\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>\r\n                            To log in get registered <a href={'https://social-network.samuraijs.com/'}\r\n                                                        rel=\"noopener noreferrer\"\r\n                                                        target={'_blank'}>here</a>\r\n                        </p>\r\n                        <p>\r\n                            or use common test account credentials:\r\n                        </p>\r\n                        <p> Email: dailinet@gmail.com\r\n                        </p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            variant='filled'\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps(\"email\")}\r\n                        />\r\n                        {formik.errors.email ? <div>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            variant='filled'\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps(\"password\")}\r\n                        />\r\n                        {formik.errors.password ? <div>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                {...formik.getFieldProps(\"rememberMe\")}\r\n                                checked={formik.values.rememberMe}\r\n                            />}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport './App.css'\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    CircularProgress,\r\n    Container,\r\n    IconButton,\r\n    LinearProgress,\r\n    Toolbar,\r\n    Typography\r\n} from '@material-ui/core'\r\nimport {Menu} from '@material-ui/icons'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from './store'\r\nimport {initializeAppTC, RequestStatusType} from './app-reducer'\r\nimport {BrowserRouter, NavLink, Route} from 'react-router-dom'\r\nimport {Login} from '../features/Login/Login'\r\nimport {logoutTC} from '../features/Login/auth-reducer'\r\nimport backImage from './../styles/sky.jpg'\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>((state) => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (!demo) {\r\n            dispatch(initializeAppTC())\r\n        }\r\n    }, [])\r\n\r\n    const logoutHandler = useCallback(() => {\r\n        dispatch(logoutTC())\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n            <div className=\"App\" style={{backgroundImage: `url(${backImage})`, height: '100%', minHeight: '100vh'}}>\r\n                <ErrorSnackbar/>\r\n                <AppBar position=\"static\">\r\n                    <Toolbar>\r\n                        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                            <Menu/>\r\n                        </IconButton>\r\n                        <Typography variant=\"h6\">\r\n                            News\r\n                        </Typography>\r\n                        {isLoggedIn && <Button color=\"inherit\" onClick={logoutHandler}>Log out</Button>}\r\n                    </Toolbar>\r\n                    {status === 'loading' && <LinearProgress/>}\r\n                </AppBar>\r\n                <Container fixed>\r\n                    <Route exact path={'#'} render={() => <TodolistsList demo={demo}/>}/>\r\n                    <Route path={'/login'} render={() => <Login/>}/>\r\n                </Container>\r\n            </div>\r\n\r\n    )\r\n}\r\n\r\nexport default App\r\n","import {tasksReducer} from '../features/TodolistsList/tasks-reducer'\r\nimport {todolistsReducer} from '../features/TodolistsList/todolists-reducer'\r\nimport {combineReducers} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from './app-reducer'\r\nimport {authReducer} from '../features/Login/auth-reducer'\r\nimport {configureStore} from '@reduxjs/toolkit'\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n// непосредственно создаём store\r\n//export const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\nexport type RootReducerType = typeof rootReducer\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunkMiddleware)\r\n})\r\n\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<RootReducerType>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport * as serviceWorker from './serviceWorker'\r\nimport App from './app/App'\r\nimport {store} from './app/store'\r\nimport {Provider} from 'react-redux'\r\nimport { HashRouter} from 'react-router-dom'\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <HashRouter>\r\n            <App/>\r\n        </HashRouter>\r\n    </Provider>, document.getElementById('root'))\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n","module.exports = __webpack_public_path__ + \"static/media/todolistBackground.b15035b8.jpg\";","module.exports = __webpack_public_path__ + \"static/media/sky.133f5077.jpg\";"],"sourceRoot":""}